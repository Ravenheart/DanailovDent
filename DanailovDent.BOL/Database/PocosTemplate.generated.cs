//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DanailovDent.BOL.Pocos
{
	/// <summary>
	/// Database       : danailov
	/// Data Source    : localhost
	/// Server Version : 5.5.5-10.1.20-MariaDB
	/// </summary>
	public partial class danailovDB : LinqToDB.Data.DataConnection
	{
		public ITable<doc>           docs          { get { return this.GetTable<doc>(); } }
		public ITable<patient>       patients      { get { return this.GetTable<patient>(); } }
		public ITable<patient_notes> patient_notes { get { return this.GetTable<patient_notes>(); } }

		public danailovDB()
		{
			InitDataContext();
		}

		public danailovDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("docs")]
	public partial class doc
	{
		[PrimaryKey, Identity   ] public uint     DocID       { get; set; } // int(11) unsigned
		[Column,        Nullable] public uint?    PatientID   { get; set; } // int(11) unsigned
		[Column,     NotNull    ] public string   DocTitle    { get; set; } // varchar(255)
		[Column,     NotNull    ] public DateTime DocDateTime { get; set; } // datetime
		[Column,     NotNull    ] public byte[]   DocContent  { get; set; } // blob

		#region Associations

		/// <summary>
		/// FK_docs_PatientID
		/// </summary>
		[Association(ThisKey="PatientID", OtherKey="PatientID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_docs_PatientID", BackReferenceName="docsPatientIDs")]
		public patient FK_docs_PatientID { get; set; }

		#endregion
	}

	[Table("patients")]
	public partial class patient
	{
		[PrimaryKey, Identity   ] public uint     PatientID          { get; set; } // int(11) unsigned
		[Column,        Nullable] public string   PatientIdentNumber { get; set; } // varchar(20)
		[Column,        Nullable] public string   PatientFirstName   { get; set; } // varchar(255)
		[Column,        Nullable] public string   PatientSecondName  { get; set; } // varchar(255)
		[Column,        Nullable] public string   PatientLastName    { get; set; } // varchar(255)
		[Column,     NotNull    ] public DateTime PatientBirthDate   { get; set; } // date
		[Column,        Nullable] public string   PatientMobile      { get; set; } // varchar(255)

		#region Associations

		/// <summary>
		/// FK_docs_PatientID_BackReference
		/// </summary>
		[Association(ThisKey="PatientID", OtherKey="PatientID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<doc> docsPatientIDs { get; set; }

		/// <summary>
		/// FK_patient_notes_PatientID_BackReference
		/// </summary>
		[Association(ThisKey="PatientID", OtherKey="PatientID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<patient_notes> patientnotesPatientIDs { get; set; }

		#endregion
	}

	[Table("patient_notes")]
	public partial class patient_notes
	{
		[PrimaryKey, Identity   ] public uint     PatientNoteID { get; set; } // int(11) unsigned
		[Column,     NotNull    ] public uint     PatientID     { get; set; } // int(11) unsigned
		[Column,     NotNull    ] public DateTime NoteDateTime  { get; set; } // date
		[Column,        Nullable] public string   Note          { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_patient_notes_PatientID
		/// </summary>
		[Association(ThisKey="PatientID", OtherKey="PatientID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_patient_notes_PatientID", BackReferenceName="patientnotesPatientIDs")]
		public patient patientnotesPatientID { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static doc Find(this ITable<doc> table, uint DocID)
		{
			return table.FirstOrDefault(t =>
				t.DocID == DocID);
		}

		public static patient Find(this ITable<patient> table, uint PatientID)
		{
			return table.FirstOrDefault(t =>
				t.PatientID == PatientID);
		}

		public static patient_notes Find(this ITable<patient_notes> table, uint PatientNoteID)
		{
			return table.FirstOrDefault(t =>
				t.PatientNoteID == PatientNoteID);
		}
	}
}
